---
name: Build Image
on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      image_flavor:
        type: string
concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref
    || github.run_id }}-${{ inputs.image_flavor }}
  cancel-in-progress: true
env:
  IMAGE_REGISTRY: ghcr.io/hecknt
  IMAGE_NAME: ublue-base
  SET_X: 1
jobs:
  get-images:
    name: Get ${{ inputs.image_flavor }} Images for Build
    outputs:
      images: ${{ steps.images.outputs.images }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Get Images for Build
        id: images
        uses: ./.github/actions/get-images
        with:
          image_flavor: ${{ inputs.image_flavor }}
  build-image:
    name: Build ${{ inputs.image_flavor }} Images (${{ matrix.image }})
    needs: get-images
    runs-on: ubuntu-24.04
    continue-on-error: false
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image: ["${{ fromJson(needs.get-images.outputs.images) }}"]
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493  # v4
      - name: Install Just
        uses: ./.github/actions/install-just
      - name: Maximize Build Space
        uses: ublue-os/remove-unwanted-software@v9
      - name: Build Image
        shell: bash
        run: |
          # note: if disabling rechunker, must also disable sudo call
          # just build ${{ matrix.image }}
          sudo just build ${{ matrix.image }}
      - name: Rechunk Image
        shell: bash
        run: |
          sudo just rechunk ${{ matrix.image }}
      - name: Load and Tag Image
        shell: bash
        run: |
          just load-image ${{ matrix.image }}
      - name: Get Tags
        id: get_tags
        shell: bash
        run: |
          tags=$(just get-tags ${{ matrix.image }})
          echo "tags=$tags" >> $GITHUB_OUTPUT
          echo $GITHUB_OUTPUT
      # NOTE: disabled secureboot check since bluefin LTS will never pass
      #- name: Check Secureboot
      #  id: secureboot
      #  shell: bash
      #  run: |
      #    just secureboot ${{ matrix.image }}
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}
      - name: Push to GHCR
        uses: Wandalen/wretry.action@v3.8.0
        id: push
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ env.IMAGE_NAME }}
            tags: ${{ steps.get_tags.outputs.tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}
            extra-args: |
              --disable-content-trust
              --compression-format=gzip
              --compression-level=9
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        with:
          cosign-release: 'v2.6.0'
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${TAGS}
        env:
          TAGS: >-
            ${{ steps.push.outputs.outputs
            && fromJSON(steps.push.outputs.outputs).digest }}
          REGISTRY: ${{ steps.registry_case.outputs.lowercase }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
  check:
    name: Check Build ${{ inputs.image_flavor }} Images Successful
    if: ${{ !cancelled() }}
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - name: Exit on failure
        if: >-
          ${{ contains(fromJson('["failure", "skipped"]'),
          needs.build-image.result) }}
        shell: bash
        run: exit 1
      - name: Exit
        shell: bash
        run: exit 0
